{#
/**
 * @file
 * Visual mode Truco
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}

{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    'node--guia-general',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}


<article{{ attributes.addClass(classes) }}>
  <div class="row row-1">
    <div class="col-md-4 col--1">
      <div class="col-content">
        {{ content.field_image }}
        <div class="content-secciones">
          <h3>Ir a...</h3>
          <p id="a-1">Propiedades y beneficios</p>
          <p id="a-2">Temporada</p>
          <p id="a-3">Nuestra selección</p>
          <p id="a-4">Te lo ponemos fácil</p>
          <p id="a-5">Recetas</p>
        </div>
      </div>
    </div>

    <div class="col-md-8 col--2">
      <div class="col-content">
        <h1>{{ label }}</h1>
        <h3>{{ content.field_subtitle }}</h3>
        {{ content.body }}
      </div>
    </div>
  </div>
  <div id="c-a-1" class="row row-2">
    <div class="col-md-12 col--1">
      <h1>Propiedades y beneficios</h1>
      <p>Algunos beneficios que no sabías sobre tomar {{ label }}.</p>
    </div>
    <div class="col-md-6 col--2">
      <div class="col-content">
        {{ content.field_propiedades_y_beneficios }}
      </div>
    </div>
    <div class="col-md-6 col--3">
      <div class="col-content d-flex align-items-center">
        <div class="content-valores-nutricionales">
          <p>Valores nutricionales</p>
          <div class="valores-nutricionales">
            <div class="val-nut col-md-2">
              <div class="circle d-flex align-items-center">{{ content.field_inf_nutr_kcal }}</div>
              <p>kcal</p>
            </div>
            <div class="val-nut col-md-2">
              <div class="circle d-flex align-items-center">{{ content.field_inf_nutr_kj }}</div>
              <p>kj</p>
            </div>
            <div class="val-nut col-md-2">
              <div class="circle d-flex align-items-center">{{ content.field_inf_nutr_grasa }}</div>
              <p>grasa</p>
            </div>
            <div class="val-nut col-md-2">
              <div class="circle d-flex align-items-center">{{ content.field_inf_nutr_hidratos }}</div>
              <p>Hidratos de carbono</p>
            </div>
            <div class="val-nut col-md-2">
              <div class="circle d-flex align-items-center">{{ content.field_inf_nutr_proteinas }}</div>
              <p>Proteínas</p>
            </div>
            <div class="val-nut col-md-2">
              <div class="circle d-flex align-items-center">{{ content.field_inf_nutr_sal }}</div>
              <p>Sal</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="c-a-2" class="row row-3">
    <div class="col-md-12 col--1">
      <h1>Temporada</h1>
    </div>
    <div class="col-md-12 col--2">

     {% set meses = ['Enero','Febrero','Marzo','Abril','Mayo','Junio','Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre'] %}
    <div class="content">
        <div class="row temporada">
        {% for item in meses %}
          <div class="col-sm-4 col-md-1 col-temporada">
            <h6 style="color: orange;">{{ item }}</h6>
            {% set on = 0 %}
            {% for mes_temporada in node.field_temporada %}
            {% if item == mes_temporada.value %} {% set on = 1 %} {% endif %}
           {% endfor %}
           <h6>{% if on == 1 %} {{ content.field_icono_temporada_on.0 }} {% else %} {{ content.field_icono_temporada_off.0 }} {% endif %}</h6>
          </div>
        {% endfor %}
        </div>
    </div>

      <img id="c-a-3" src="/themes/custom/consum_es/assets/img/variedades_provisional.jpg">
    </div>
  </div>
  <div id="c-a-4" class="row row-4">
    <div class="col-md-12 col--1">
      <h1>Te lo ponemos fácil</h1>
      {{ content.field_tol_item }}
    </div>
  </div>
  <div id="c-a-5" class="row row-5">
    <div class="col-md-12 col--1">
      <h1>Cocina con {{label}}</h1>
      <img src="/themes/custom/consum_es/assets/img/recetas.jpg">
    </div>
  </div>
</article>